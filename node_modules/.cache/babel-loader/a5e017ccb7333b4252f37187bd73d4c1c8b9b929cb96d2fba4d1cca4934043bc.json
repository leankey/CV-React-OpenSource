{"ast":null,"code":"var _jsxFileName = \"E:\\\\VSCodeProjects\\\\my-app\\\\src\\\\components\\\\ProgressBar.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ProgressBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.progressBarRef = /*#__PURE__*/React.createRef();\n    this.handleScroll = this.handleScroll.bind(this);\n    this.state = {\n      animated: false,\n      currentPercent: 0 // Добавлено новое состояние для текущего значения анимации\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"scroll\", this.handleScroll);\n    this.handleScroll(); // Проверка видимости элемента при загрузке страницы\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"scroll\", this.handleScroll);\n  }\n  handleScroll() {\n    if (this.isElementInView(this.progressBarRef.current)) {\n      if (!this.state.animated) {\n        this.setState({\n          animated: true\n        }, () => {\n          this.animateProgressBar();\n        });\n      }\n    } else {\n      if (this.state.animated) {\n        this.setState({\n          animated: false\n        });\n      }\n    }\n  }\n  animateProgressBar() {\n    const {\n      percent\n    } = this.props;\n    let currentValue = 0;\n    const intervalId = setInterval(() => {\n      currentValue += 1;\n      this.setState({\n        currentPercent: currentValue\n      });\n      if (currentValue >= percent) {\n        clearInterval(intervalId);\n      }\n    }, 10);\n  }\n  isElementInView(element) {\n    const rect = element.getBoundingClientRect();\n    return rect.top >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight);\n  }\n  render() {\n    const {\n      title,\n      level,\n      percent\n    } = this.props;\n    const {\n      animated,\n      currentPercent\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"progress-bar-label\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `progress ${animated ? \"animated\" : \"\"}`,\n          style: {\n            width: `${currentPercent}%`\n          },\n          ref: this.progressBarRef,\n          children: level\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this);\n  }\n}\nexport default ProgressBar;","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ProgressBar","Component","constructor","props","progressBarRef","createRef","handleScroll","bind","state","animated","currentPercent","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","isElementInView","current","setState","animateProgressBar","percent","currentValue","intervalId","setInterval","clearInterval","element","rect","getBoundingClientRect","top","bottom","innerHeight","document","documentElement","clientHeight","render","title","level","children","className","fileName","_jsxFileName","lineNumber","columnNumber","style","width","ref"],"sources":["E:/VSCodeProjects/my-app/src/components/ProgressBar.js"],"sourcesContent":["import React from \"react\";\r\n\r\nclass ProgressBar extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.progressBarRef = React.createRef();\r\n      this.handleScroll = this.handleScroll.bind(this);\r\n      this.state = {\r\n        animated: false,\r\n        currentPercent: 0, // Добавлено новое состояние для текущего значения анимации\r\n      };\r\n    }\r\n  \r\n    componentDidMount() {\r\n      window.addEventListener(\"scroll\", this.handleScroll);\r\n      this.handleScroll(); // Проверка видимости элемента при загрузке страницы\r\n    }\r\n  \r\n    componentWillUnmount() {\r\n      window.removeEventListener(\"scroll\", this.handleScroll);\r\n    }\r\n  \r\n    handleScroll() {\r\n      if (this.isElementInView(this.progressBarRef.current)) {\r\n        if (!this.state.animated) {\r\n          this.setState({ animated: true }, () => {\r\n            this.animateProgressBar();\r\n          });\r\n        }\r\n      } else {\r\n        if (this.state.animated) {\r\n          this.setState({ animated: false });\r\n        }\r\n      }\r\n    }\r\n  \r\n    animateProgressBar() {\r\n      const { percent } = this.props;\r\n      let currentValue = 0;\r\n  \r\n      const intervalId = setInterval(() => {\r\n        currentValue += 1;\r\n        this.setState({ currentPercent: currentValue });\r\n  \r\n        if (currentValue >= percent) {\r\n          clearInterval(intervalId);\r\n        }\r\n      }, 10);\r\n    }\r\n  \r\n    isElementInView(element) {\r\n      const rect = element.getBoundingClientRect();\r\n      return (\r\n        rect.top >= 0 &&\r\n        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight)\r\n      );\r\n    }\r\n  \r\n    render() {\r\n      const { title, level, percent } = this.props;\r\n      const { animated, currentPercent } = this.state;\r\n      return (\r\n        <div>\r\n          <h4 className=\"progress-bar-label\">{title}</h4>\r\n          <div className=\"progress-bar\">\r\n            <div\r\n              className={`progress ${animated ? \"animated\" : \"\"}`}\r\n              style={{ width: `${currentPercent}%` }}\r\n              ref={this.progressBarRef}\r\n            >\r\n              {level}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default ProgressBar;\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}